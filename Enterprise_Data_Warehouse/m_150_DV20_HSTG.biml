<!--

Comments:
   This is the template for loading data to HSTG with the current record indicator.
   This template supports both the 'pass checksum' as well as the 'generate checksum' approach. This is driven by a flag - NEEDS TO BE REPLACED BY METADATA SETTING

	This script takes the additional OMD_CDC_OPERATION into account in the record comparison.
	Similarly, this script removes cache-intensive lookups in favour of SQL processing.
	Developed following Data Vault 2.0 guidelines - incorporating Staging Area hashing

-->

<#@ include file="Include_C_References.biml" #>
<#@ include file="Include_BIML_Configuration.biml" #>

<# 
	
	string sqlStatementForTablesToImport = "SELECT TABLE_SCHEMA,TABLE_NAME FROM INFORMATION_SCHEMA.TABLES " +
										   "WHERE TABLE_TYPE = 'BASE TABLE' ";

	string currentSchemaName ="dbo";
	string GenerateChecksum = "N"; // Can be Y or N. N will pass the checksum which is needed for some flat file interfaces
	string currentTableName;
	string targetTableName;
	string targetTableIndexName;
	string mainBusinessKey;
	string currentBusinessKey="";

#>

<Biml xmlns="http://schemas.varigence.com/biml.xsd">

	<#@ include file="Include_Generic_ScriptProject.biml" #>	
	<#@ include file="Include_HSTG_Connections.biml" #>	

	<Packages>
				<#
				
				DataTable tables = ExternalDataAccess.GetDataTable(connectionStringSTG, sqlStatementForTablesToImport);
				foreach (DataRow row in tables.Rows)
				{
				
					// **************************************************************************************
					// Variables and parameters
					// **************************************************************************************

					StringBuilder sb = new StringBuilder();

					currentTableName = (string)row["TABLE_NAME"];
					targetTableName = "H"+currentTableName;
					targetTableIndexName = "PK_"+targetTableName;
					mainBusinessKey ="";	
					
					
					// Query the natural key(s)
					System.Text.StringBuilder sqlStatementForPartitioningQuery = new System.Text.StringBuilder();		
					sqlStatementForPartitioningQuery.AppendLine("SELECT C.name AS ATTRIBUTE_NAME");
					sqlStatementForPartitioningQuery.AppendLine("FROM sys.index_columns A");
					sqlStatementForPartitioningQuery.AppendLine("JOIN sys.indexes B");
					sqlStatementForPartitioningQuery.AppendLine("ON A.object_id=B.object_id");
					sqlStatementForPartitioningQuery.AppendLine("  AND A.index_id=B.index_id");
					sqlStatementForPartitioningQuery.AppendLine("JOIN sys.columns C");
					sqlStatementForPartitioningQuery.AppendLine("ON A.column_id=C.column_id");
					sqlStatementForPartitioningQuery.AppendLine("  AND A.object_id=C.object_id");
					sqlStatementForPartitioningQuery.AppendLine("WHERE B.name='"+targetTableIndexName+"'");
					sqlStatementForPartitioningQuery.AppendLine("  AND C.name<>'OMD_INSERT_DATETIME'");
					//sqlStatementForPartitioningQuery.AppendLine("  AND C.name<>'OMD_SOURCE_ROW_ID'"); REMOVED BECAUSE SOMETIMES PART OF KEY
					sqlStatementForPartitioningQuery.AppendLine("ORDER BY A.key_ordinal");

					DataTable PartitionAttributes = ExternalDataAccess.GetDataTable(connectionStringHSTG, sqlStatementForPartitioningQuery.ToString());
					
					int keycounter = 1;
					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{
						if (keycounter == 1)
						{
							mainBusinessKey = BusinessKey["ATTRIBUTE_NAME"].ToString();
						}    
						keycounter++;
					}	

					// Add the main attribute list of the STG table for selection
					System.Text.StringBuilder sqlStatementForSourceQuery = new System.Text.StringBuilder();		
					sqlStatementForSourceQuery.AppendLine("SELECT COLUMN_NAME, DATA_TYPE,CHARACTER_MAXIMUM_LENGTH,NUMERIC_PRECISION");
					sqlStatementForSourceQuery.AppendLine("FROM INFORMATION_SCHEMA.COLUMNS");
					sqlStatementForSourceQuery.AppendLine("WHERE TABLE_NAME= '"+currentTableName+"'");
					sqlStatementForSourceQuery.AppendLine("  AND COLUMN_NAME !='OMD_INSERT_MODULE_INSTANCE_ID'");	
					sqlStatementForSourceQuery.AppendLine("  AND (COLUMN_NAME NOT LIKE 'OMD_HASH_%' ) ");									
					sqlStatementForSourceQuery.AppendLine("ORDER BY ORDINAL_POSITION");	
					
					//Reset OMD Current Record Indicator Query
					StringBuilder ResetQuery = new StringBuilder();
					ResetQuery.AppendLine("UPDATE HSTG");
					ResetQuery.AppendLine("SET HSTG.OMD_CURRENT_RECORD_INDICATOR = CASE WHEN LEAD_"+targetTableName+"_SK IS NULL THEN 'Y' ELSE 'N' END");
					ResetQuery.AppendLine("FROM [EDW_150_Persistent_Staging_Area].[dbo].["+targetTableName+"] HSTG");
					ResetQuery.AppendLine("  JOIN (");
					ResetQuery.AppendLine("         SELECT");
					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{
    					ResetQuery.AppendLine("           HSTG."+(string)BusinessKey["ATTRIBUTE_NAME"]+",");
					}
					ResetQuery.AppendLine("           HSTG.OMD_INSERT_DATETIME,");
					ResetQuery.AppendLine("			  HSTG.OMD_CURRENT_RECORD_INDICATOR,");
					ResetQuery.AppendLine("           LEAD('X',1,null) OVER (PARTITION BY ");
					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{
						if ((string)BusinessKey["ATTRIBUTE_NAME"]!="OMD_SOURCE_ROW_ID")
						{
    						ResetQuery.Append("             HSTG."+(string)BusinessKey["ATTRIBUTE_NAME"]+",");
						}
					}
					ResetQuery.Remove(ResetQuery.Length - 1,1);
					ResetQuery.AppendLine(); 
					ResetQuery.AppendLine("                  ORDER BY HSTG.OMD_INSERT_DATETIME, HSTG.OMD_SOURCE_ROW_ID ASC) AS LEAD_"+targetTableName+"_SK");              
					ResetQuery.AppendLine("            FROM [EDW_150_Persistent_Staging_Area].[dbo].["+targetTableName+"] HSTG");
					ResetQuery.AppendLine("                 INNER JOIN(");
                    ResetQuery.AppendLine("		                  SELECT DISTINCT");
					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{					    
    					ResetQuery.AppendLine("		                         "+(string)BusinessKey["ATTRIBUTE_NAME"]+",");
					}
					ResetQuery.AppendLine("		                         OMD_INSERT_DATETIME");
					ResetQuery.AppendLine("		                  FROM [EDW_100_Staging_Area].[dbo].["+currentTableName+"]");
					ResetQuery.AppendLine("                 )STG ON");
					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{
						if ((string)BusinessKey["ATTRIBUTE_NAME"]!="OMD_SOURCE_ROW_ID")
						{
					    currentBusinessKey = (string)BusinessKey["ATTRIBUTE_NAME"];
    					ResetQuery.AppendLine("                 HSTG."+currentBusinessKey+" = STG."+currentBusinessKey + " AND");
						}
					}
					ResetQuery.Remove(ResetQuery.Length - 5,5);
					//ResetQuery.AppendLine("                 HSTG.OMD_INSERT_DATETIME = STG.OMD_INSERT_DATETIME");
					ResetQuery.AppendLine();
					ResetQuery.AppendLine("       )SUB ON");
					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{
					    currentBusinessKey = (string)BusinessKey["ATTRIBUTE_NAME"];
    					ResetQuery.AppendLine("       HSTG."+currentBusinessKey+" = SUB."+currentBusinessKey + " AND");
					}
					ResetQuery.AppendLine("       HSTG.OMD_INSERT_DATETIME = SUB.OMD_INSERT_DATETIME");		
					ResetQuery.AppendLine("WHERE");
					ResetQuery.AppendLine("HSTG.OMD_CURRENT_RECORD_INDICATOR='Y'");
					ResetQuery.AppendLine("AND  LEAD_"+targetTableName+"_SK ='X'");
					
								
							


					// Creating the source selection query
					System.Text.StringBuilder SqlSourceStatement = new System.Text.StringBuilder();		
					SqlSourceStatement.AppendLine("SELECT ");	  

					DataTable SourceStructure = ExternalDataAccess.GetDataTable(connectionStringSTG, sqlStatementForSourceQuery.ToString());
					
					foreach (DataRow attribute in SourceStructure.Rows)
					{
						    SqlSourceStatement.AppendLine("   STG.["+attribute["COLUMN_NAME"].ToString()+"],");	    
					} 			

					if (GenerateChecksum=="Y")
					{
						// Definition of the checksum
						SqlSourceStatement.AppendLine();
						SqlSourceStatement.AppendLine("  CONVERT(CHAR(32),HASHBYTES('MD5',");
						SqlSourceStatement.Append("      ISNULL(RTRIM(CONVERT(VARCHAR(100),STG.OMD_CDC_OPERATION)),'NA')+'|'+");	
						SqlSourceStatement.AppendLine("");		

						string ChecksumAttribute;
						foreach (DataRow attribute in SourceStructure.Rows)
						{
							ChecksumAttribute=attribute["COLUMN_NAME"].ToString();
							if (ChecksumAttribute.StartsWith("OMD")==false)
							{
								SqlSourceStatement.Append("      ISNULL(RTRIM(CONVERT(VARCHAR(100),STG.["+attribute["COLUMN_NAME"].ToString()+"])),'NA')+'|'+");
								SqlSourceStatement.AppendLine();
							}						    
						} 	
					
						SqlSourceStatement.Remove(SqlSourceStatement.Length - 3,3);										
						SqlSourceStatement.AppendLine("   ),2) AS OMD_HASH_FULL_RECORD,");
					}
					else
					{
					    SqlSourceStatement.AppendLine("   STG.[OMD_HASH_FULL_RECORD],");

					}
					// End of checksum definition

    			    SqlSourceStatement.AppendLine("   COALESCE(maxsub.LKP_OMD_HASH_FULL_RECORD,'N/A') AS LKP_OMD_HASH_FULL_RECORD,");
    			    SqlSourceStatement.AppendLine("   COALESCE(maxsub.LKP_OMD_CDC_OPERATION,'N/A') AS LKP_OMD_CDC_OPERATION,");    			   

					// ROW_NUMBER over Partition By query element
					SqlSourceStatement.AppendLine("   CAST(ROW_NUMBER() OVER (PARTITION  BY ");

					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{
    					SqlSourceStatement.Append("      STG."+(string)BusinessKey["ATTRIBUTE_NAME"]+",");
					} 
					
					SqlSourceStatement.Remove(SqlSourceStatement.Length - 1,1);
					SqlSourceStatement.AppendLine();
					SqlSourceStatement.AppendLine("   ORDER BY ");	
					
					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{
    					SqlSourceStatement.Append("      STG."+(string)BusinessKey["ATTRIBUTE_NAME"]+",");
					} 
					
					SqlSourceStatement.Append(" STG.OMD_INSERT_DATETIME, STG.OMD_SOURCE_ROW_ID) AS INT) AS ROW_NUMBER");	
					SqlSourceStatement.AppendLine();
				             		
					// End of the query			
					SqlSourceStatement.AppendLine("FROM ");
					SqlSourceStatement.AppendLine(currentTableName+" STG");
					SqlSourceStatement.AppendLine("LEFT OUTER JOIN -- Prevent reprocessing");
					SqlSourceStatement.AppendLine("   [EDW_150_Persistent_Staging_Area].[dbo].["+targetTableName+"] HSTG");
					SqlSourceStatement.AppendLine("   ON");
					
					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{
					    currentBusinessKey = (string)BusinessKey["ATTRIBUTE_NAME"];
    					SqlSourceStatement.AppendLine("      HSTG."+currentBusinessKey+" = STG."+currentBusinessKey+" AND");
					} 
					
					SqlSourceStatement.AppendLine("      HSTG.OMD_EVENT_DATETIME = STG.OMD_EVENT_DATETIME");		
								
					SqlSourceStatement.AppendLine("LEFT OUTER JOIN -- max HSTG checksum");
					SqlSourceStatement.AppendLine("(");
					
					// Max subquery
					SqlSourceStatement.AppendLine("   SELECT");

					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{
					    SqlSourceStatement.Append("      A.");
					    SqlSourceStatement.Append(BusinessKey["ATTRIBUTE_NAME"].ToString());					    
					    SqlSourceStatement.AppendLine(",");
					} 					

					SqlSourceStatement.AppendLine("      A.OMD_HASH_FULL_RECORD AS LKP_OMD_HASH_FULL_RECORD," );
					SqlSourceStatement.AppendLine("      A.OMD_CDC_OPERATION AS LKP_OMD_CDC_OPERATION" );
					SqlSourceStatement.AppendLine("   FROM [EDW_150_Persistent_Staging_Area].[dbo].["+targetTableName+"] A");
					SqlSourceStatement.AppendLine("   WHERE A.OMD_CURRENT_RECORD_INDICATOR='Y'");
					SqlSourceStatement.AppendLine(") maxsub ON");
					
					foreach (DataRow BusinessKey in PartitionAttributes.Rows)
					{
					    currentBusinessKey = (string)BusinessKey["ATTRIBUTE_NAME"];
    					SqlSourceStatement.AppendLine("   STG."+currentBusinessKey+" = maxsub."+currentBusinessKey+" AND");
					} 						
					SqlSourceStatement.Remove(SqlSourceStatement.Length - 5,5);							
					SqlSourceStatement.AppendLine();					
					SqlSourceStatement.AppendLine("WHERE");
					SqlSourceStatement.AppendLine("   HSTG."+mainBusinessKey+" IS NULL");	
								
					sb.AppendLine("= = = = = =");
					sb.AppendLine(currentTableName);
					sb.AppendLine();											
					sb.AppendLine("= = = = = =");
					sb.AppendLine("Main source query");
					sb.AppendLine(SqlSourceStatement.ToString());
					sb.AppendLine();
					sb.AppendLine("= = = = = =");
					sb.AppendLine("Query for source attributes");
					sb.AppendLine(sqlStatementForSourceQuery.ToString());
					sb.AppendLine();
					sb.AppendLine("= = = = = =");
					sb.AppendLine("Query for business key / index");
					sb.AppendLine(sqlStatementForPartitioningQuery.ToString());
					sb.AppendLine("= = = = = =");
					sb.AppendLine("Query for updating the current row indicator");
					sb.AppendLine(ResetQuery.ToString());
					sb.AppendLine()
					;sb.AppendLine();	
					
									

					using (StreamWriter outfile = 	new StreamWriter(mydocpath + @"\BIML_log_"+targetTableName+".txt"))
					{
						outfile.Write(sb.ToString());
					}

				#>

	           <Package Name="m_150_H<#=currentTableName#>" Language="None" IsolationLevel="ReadCommitted" LoggingMode="Disabled" ConstraintMode="Parallel">

				<#@ include file="Include_Parameters.biml" #>	
				<#@ include file="Include_Variables_HSTG.biml" #>	
				<#@ include file="Include_OMD_OnError_Event.biml" #>	
				
			    <#@ include file="Include_HSTG_Connection_Parameters.biml" #>					

				<Tasks>

					<#@ include file="Include_OMD_OnPreExecute_Event.biml" #>	

					<Dataflow Name="DFT - H<#=currentTableName#>" DelayValidation="true" IsolationLevel="ReadCommitted" FailPackageOnFailure="true">
					
						<PrecedenceConstraints LogicalType="And">
							<Inputs>
								<Input OutputPathName="SCT - Dummy Placeholder.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_PROCESSING_INDICATOR == &quot;P&quot;" />
							</Inputs>
						</PrecedenceConstraints>

						<Transformations>
						
							<OleDbSource Name="SRC - <#=currentTableName#>" DefaultCodePage="1252" ConnectionName="STG">
								<ErrorHandling ErrorRowDisposition="IgnoreFailure" TruncationRowDisposition="IgnoreFailure" />
								<Parameters>
									<Parameter Name="0" VariableName="User.V_EVENT_TYPE_CODE" />
									<Parameter Name="1" VariableName="User.V_EVENT_TYPE_CODE" />
								</Parameters>
								<DirectInput>
									<#=SqlSourceStatement#>
								</DirectInput>
							</OleDbSource>
							
							<RowCount Name="CNT - INPUT" VariableName="User.V_ROW_COUNT_INPUT">
								<InputPath OutputPathName="SRC - <#=currentTableName#>.Output" />
							</RowCount>
							
							<ConditionalSplit Name="CDS - Only lookup the first value for any business key">
								<InputPath OutputPathName="CNT - INPUT.Output" />
								<OutputPaths>
									<OutputPath Name="Lookup selection">
										<Expression>ROW_NUMBER==1 || (ROW_NUMBER!=1 &amp;&amp;  [LKP_OMD_HASH_FULL_RECORD]=="N/A")</Expression>
									</OutputPath>
									<OutputPath Name="Direct insert selection">
										<Expression>ROW_NUMBER!=1</Expression>
									</OutputPath>
								</OutputPaths>
							</ConditionalSplit>
								                        	                        
							<ConditionalSplit Name="CDS - Compare values">
								<InputPath OutputPathName="CDS - Only lookup the first value for any business key.Lookup selection" />
								<OutputPaths>
									<OutputPath Name="Changes in values">
										<Expression>(OMD_HASH_FULL_RECORD != LKP_OMD_HASH_FULL_RECORD) || (OMD_HASH_FULL_RECORD == LKP_OMD_HASH_FULL_RECORD) &amp;&amp; (OMD_CDC_OPERATION != LKP_OMD_CDC_OPERATION)</Expression>
									</OutputPath>
									<OutputPath Name="No changes - discard">
										<Expression>(OMD_HASH_FULL_RECORD == LKP_OMD_HASH_FULL_RECORD) &amp;&amp; (OMD_CDC_OPERATION == LKP_OMD_CDC_OPERATION)</Expression>
									</OutputPath>
								</OutputPaths>
							</ConditionalSplit>
	                        
							<UnionAll Name="Union All">
								<InputPaths>
									<InputPath OutputPathName="CDS - Only lookup the first value for any business key.Direct insert selection" />		                            
									<InputPath OutputPathName="CDS - Compare values.Changes in values" />
								</InputPaths>
							</UnionAll>
	                        
							<DerivedColumns Name="DRC - Standard Values">
							<InputPath OutputPathName="Union All.Output" />
								<Columns>
									<Column Name="OMD_INSERT_MODULE_INSTANCE_ID" DataType="Int32">@[User::V_MODULE_INSTANCE_ID]</Column>
									<Column Name="OMD_CURRENT_RECORD_INDICATOR" DataType="AnsiString" Length="100" CodePage="1252">(DT_STR,1,1252)"Y"</Column>
								</Columns>
							</DerivedColumns>
	                        
							<RowCount Name="CNT - DISCARDED for same values" VariableName="User.V_ROW_COUNT_DISCARDED">
								<InputPath OutputPathName="CDS - Compare values.No changes - discard" />
							</RowCount>
													
							<RowCount Name="CNT - INSERTED" VariableName="User.V_ROW_COUNT_INSERTED">
								<InputPath OutputPathName="DRC - Standard Values.Output" />
							</RowCount>
							
							<OleDbDestination Name="DST - H<#=currentTableName#>" ConnectionName="HSTG" MaximumInsertCommitSize="20000" DefaultCodePage="1252" UseFastLoadIfAvailable="true" TableLock="false" CheckConstraints="true">
								<ExternalTableOutput Table="[<#=currentSchemaName#>].[H<#=currentTableName#>]" />
							</OleDbDestination>
								
						</Transformations>
						
				  </Dataflow>

				  <ExecuteSQL Name="EST - Reset Current Record Indicator in HSTG" ConnectionName="HSTG" >
						<PrecedenceConstraints LogicalType="And">
							<Inputs>
								<Input OutputPathName="DFT - H<#=currentTableName#>.Output" EvaluationOperation="Constraint" />
							</Inputs>
						</PrecedenceConstraints>
	    
						<DirectInput>
						   <#=ResetQuery#>
						</DirectInput>	
						
						<#@ include file="Include_OMD_OnPostExecute_Event.biml" #>							
				   </ExecuteSQL>

				  </Tasks>

				</Package>

		<#
	    }
		#>

	</Packages>
</Biml>